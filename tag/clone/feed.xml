<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="http://localhost:4000/tag/clone/feed.xml" rel="self" type="application/atom+xml" />
  <link href="http://localhost:4000/" rel="alternate" type="text/html" />
  <updated>2022-01-31T00:22:52+09:00</updated>
  <id>http://localhost:4000/tag/clone/feed.xml</id>

  
  
  

  
    <title type="html">Collection of studies | </title>
  

  
    <subtitle>공부 정리용 블로그</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">Wetube 클론코딩 - MIDDLEWARES(EXPRESS)</title>
      <link href="http://localhost:4000/wetube-cloning3" rel="alternate" type="text/html" title="Wetube 클론코딩 - MIDDLEWARES(EXPRESS)" />
      <published>2022-01-29T09:00:00+09:00</published>
      <updated>2022-01-29T09:00:00+09:00</updated>
      <id>http://localhost:4000/wetube-cloning3</id>
      <content type="html" xml:base="http://localhost:4000/wetube-cloning3">&lt;p&gt;안녕하세요. 성장하는 것을 즐기는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;changuk&lt;/code&gt;이라고 합니다. 현재 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nomadcoders&lt;/code&gt;에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wetube&lt;/code&gt; 클론코딩을 공부하고 있습니다. 강의를 들으면서 해온 것들을 작성하여 지식을 공유하고 또 제가 잊었을 때 다시 와서 볼 수 있도록 내용들을 정리하려고 합니다.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;Wetube 클론코딩 &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;./wetube-cloning1&quot;&gt;SET UP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;a href=&quot;./wetube-cloning2&quot;&gt;INTRODUCTION TO EXPRESS&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href=&quot;./wetube-cloning3&quot;&gt;MIDDLEWARES(EXPRESS)&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;middleware&quot;&gt;MIDDLEWARE&lt;/h2&gt;

&lt;p&gt;본격적으로 웹사이트를 만들기 전에, middleware의 개념을 이해해야 합니다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;middleware&lt;/code&gt;는 이름에 뜻이 있습니다. &lt;strong&gt;중간에 있는 소프트웨어&lt;/strong&gt;라는 의미입니다. 그럼 무엇의 중간에 있다는 의미일까요?? 이전 챕터에서의 내용 기억나시나요?? &lt;strong&gt;브라우저가 무언가를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;request&lt;/code&gt;하면 서버는 거기에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;response&lt;/code&gt;해준다.&lt;/strong&gt; &lt;strong&gt;middleware&lt;/strong&gt;는 바로 &lt;strong&gt;request, response&lt;/strong&gt;사이에 있습니다. 브라우저가 request하고 서버가 response하기 전, 그 사이에 middleware가 있는 것입니다. 하나 기억하고 넘어가면 좋을 것 같습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;모든 middleware는 handler고 모든 handler는 middleware다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그리고 이제부턴 &lt;strong&gt;handler&lt;/strong&gt;라는 말 대신 &lt;strong&gt;controller&lt;/strong&gt;라는 용어로 사용하겠습니다. 실제로 &lt;strong&gt;handler&lt;/strong&gt;는 &lt;strong&gt;controller&lt;/strong&gt;이거든요. 추후 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MVC&lt;/code&gt;를 설명할 때 괴리감을 줄이고자, 이렇게 사용하도록 하겠습니다. 그러니 다음과 같이 이야기 할 수 있겠죠.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;모든 controller는 middlerware고 모든 middleware는 controller다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;원래 controller에는 두 개의 argument인 request(req), response(res)외에도 하나가 더 있습니다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Woo Chang Uk</name>
        
        
      </author>

      

      
        <category term="Clone" />
      

      
        <summary type="html">안녕하세요. 성장하는 것을 즐기는 changuk이라고 합니다. 현재 nomadcoders에서 Wetube 클론코딩을 공부하고 있습니다. 강의를 들으면서 해온 것들을 작성하여 지식을 공유하고 또 제가 잊었을 때 다시 와서 볼 수 있도록 내용들을 정리하려고 합니다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Wetube 클론코딩 - INTRODUCTION TO EXPRESS</title>
      <link href="http://localhost:4000/wetube-cloning2" rel="alternate" type="text/html" title="Wetube 클론코딩 - INTRODUCTION TO EXPRESS" />
      <published>2022-01-26T03:00:00+09:00</published>
      <updated>2022-01-26T03:00:00+09:00</updated>
      <id>http://localhost:4000/wetube-cloning2</id>
      <content type="html" xml:base="http://localhost:4000/wetube-cloning2">&lt;p&gt;안녕하세요. 성장하는 것을 즐기는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;changuk&lt;/code&gt;이라고 합니다. 현재 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nomadcoders&lt;/code&gt;에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wetube&lt;/code&gt; 클론코딩을 공부하고 있습니다. 강의를 들으면서 해온 것들을 작성하여 지식을 공유하고 또 제가 잊었을 때 다시 와서 볼 수 있도록 내용들을 정리하려고 합니다.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;Wetube 클론코딩 &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;./wetube-cloning1&quot;&gt;SET UP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;a href=&quot;./wetube-cloning2&quot;&gt;INTRODUCTION TO EXPRESS&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href=&quot;./wetube-cloning3&quot;&gt;MIDDLEWARES(EXPRESS)&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;먼저 우리의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.js&lt;/code&gt; 파일을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server.js&lt;/code&gt; 파일로 변경해줍시다. 그리고 앞으로는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src(source)&lt;/code&gt;파일을 만들어서 우리가 만들 모든 application들을 src에 넣겠습니다. 자, 그러면 모든 준비가 끝났습니다. 시작하죠&lt;/p&gt;

&lt;h2 id=&quot;첫-server-만들기&quot;&gt;첫 Server 만들기&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;express&lt;/code&gt;를 import 해줍니다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import from&lt;/code&gt;을 사용하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;express&lt;/code&gt;는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node_modules&lt;/code&gt;내에서 검색하게 됩니다. 그 후 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;express app&lt;/code&gt;을 생성해주는 코드도 작성합니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;express;
const app = express();
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 하면 express app이 만들어지게 됩니다 와우! 이제 이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app&lt;/code&gt;은 사용자의 요청을 listen 할 수 있어야 합니다. 여기서 생각해야할 문제가 있습니다. &lt;strong&gt;app&lt;/strong&gt;이 &lt;strong&gt;listen&lt;/strong&gt;한다고 했을 때, 과연 &lt;strong&gt;무엇을&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;listen&lt;/code&gt;한다는 것일까요? 이를 위해서는 &lt;strong&gt;서버&lt;/strong&gt;를 알아야 합니다.&lt;/p&gt;

&lt;h2 id=&quot;서버server&quot;&gt;서버(Server)&lt;/h2&gt;

&lt;p&gt;서버는 항상 켜져있는 컴퓨터라고 생각할 수 있습니다. 서버는 노트북으로 작동 될 수도 있고, 데스크탑으로 작동될 수도 있습니다. 일반적으로는 우리가 상상하는 키보드, 모니터도 없는 수 많은 하드디스크들로 이루어진 컴퓨터의 모습이 서버 역할을 하는 컴퓨터라고 할 수 있습니다. 정리하자면 서버는 항상 켜져있고 인터넷에 연결되어 있는 컴퓨터지요. 웹 app의 관점에서 서버의 기능을 살펴보도록 합시다.&lt;/p&gt;

&lt;h4 id=&quot;request&quot;&gt;request?&lt;/h4&gt;

&lt;p&gt;서버는 &lt;strong&gt;request&lt;/strong&gt;를 &lt;strong&gt;listening&lt;/strong&gt;하고 있습니다. 만약 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;google.com&lt;/code&gt; 사이트에 접속한다고 해봅시다. 그럼 우리는 지금 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;google.com&lt;/code&gt;에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;request&lt;/code&gt;를 보낸 것입니다. 이것이 서버가 request를 listening 하고 있다는 의미입니다. 구글의 서버가 그 역할을 하고 있는 것이죠. 카카오톡에서 상대편에게 메시지를 보내는 것도 request입니다. 제가 서버에게 메시지를 보내면 서버는 제게 응답을 보내게 됩니다. 이것이 서버가 하는 일입니다. request를 듣고 답하는 것이지요. 우리는 이 서버가 사람들이 뭔가를 요청할 때 까지 기다리도록 해야 합니다. 바로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;express&lt;/code&gt;에서 지원해주는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app.listen()&lt;/code&gt;으로 말이죠.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;listen()에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;callback&lt;/code&gt; 함수가 있습니다. 따라서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;callback&lt;/code&gt;을 작성하기 전에 서버에게 어떤 port를 listening 할 지를 이야기 해 주어야 합니다. 컴퓨터에는 이미 수 많은 port가 있으니까요. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;port&lt;/code&gt;는 컴퓨터가 외부의 사이트나 다른 프로그램에 접속하기 위해 필요합니다. 우리의 경우 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4000&lt;/code&gt;번 port번호를 사용하겠습니다. 그리고 서버가 잘 작동하는지를 한번 확인해보죠.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleListening&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Server listening on port 4000🚀&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleListening&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음과 같이 작성한 후 콘솔 창을 확인해보면,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handleListening&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;callback&lt;/code&gt;함수가 잘 작동하는 것을 볼 수 있습니다! 우리는 port 4000번을 listening 하는 서버를 만들었습니다. 그럼 이제 서버에 어떻게 갈 수 있을까요? 일반적으로는 localhost로 접속할 수 있습니다. 한번 해보죠. 인터넷 URL에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost:4000&lt;/code&gt;이라고 입력해봅시다. 접속해보면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cannot GET/&lt;/code&gt;이라는 텍스트가 우리를 반겨줍니다. 이게 뭘까요?? 이 친구는 일단 다음에 확인해보도록 합시다. &lt;strong&gt;중요한 것은, 우리는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;express&lt;/code&gt;를 사용하여 브라우저에서 접속할 수 있는 우리들만의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server&lt;/code&gt;를 만들었다는 것입니다!&lt;/strong&gt; 사실인지 아닌지는 nodemon을 종료해본다면 확실하게 알 수 있을거에요. 다음으로 넘어가기 전에, 코드를 좀 더 간결하게 만들어 봅시다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PORT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`Server listening on port &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;🚀`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;get-requests&quot;&gt;GET Requests&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost:4000&lt;/code&gt;으로 접속하게 되면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cannot GET/&lt;/code&gt;을 보게 됩니다. 하나씩 살펴 봅시다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Cannot : ~을 할 수 없다&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;GET : ~을 얻다/ 가져오다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;/ : ??&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Cannot&lt;/strong&gt; 이나, &lt;strong&gt;GET&lt;/strong&gt;은 대충 의미를 유추할 수 있을 것 같은데 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt;는 무슨의미일까요?? &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt;는 &lt;strong&gt;서버의 root, 혹은 첫 페이지&lt;/strong&gt;를 의미합니다. 예를 들어 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;google.com&lt;/code&gt;에 접속한다면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;google.com/&lt;/code&gt;라고 요청하는 것과 같은 의미라는 소리지요. 생각보다 간단했네요. 이제 그럼 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET&lt;/code&gt;의 정확한 의미에 대해 알아봅시다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET&lt;/code&gt;은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP method&lt;/code&gt;라고 합니다. 갑자기 HTTP method라고 하니 무슨말인지 잘 모르겠네요. 먼저 &lt;a href=&quot;https://ko.wikipedia.org/wiki/HTTP&quot; target=&quot;_blank&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt;&lt;/a&gt;에 대해 알 필요가 있습니다. 링크에서 한번 훑어보고 옵시다. (HTTP에 관해선 추후 NETWORK 태그로 글을 정리할 계획입니다.) &lt;br /&gt;간단하게 말씀드리자면, &lt;strong&gt;HTTP는 개인과 서버 또는 서버끼리 소통하는 방법&lt;/strong&gt;이라고 할 수 있습니다. 사용자가 URL로 접속하려 할 때, 브라우저는 사용자를 위해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP REQUEST&lt;/code&gt;를 만들어서 서버에 보내게 됩니다. 그러므로 &lt;strong&gt;HTTP REQUEST는 웹사이트에 접속하고 서버에 정보를 보내는 방법&lt;/strong&gt;입니다.
링크에서 보면 알 수 있지만 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt;는 많은 method를 가지고 있습니다. 여기서 우리가 사용하려는 &lt;strong&gt;GET&lt;/strong&gt;은 &lt;strong&gt;페이지를 가져와줘&lt;/strong&gt; 라는 의미로 사용될 수 있습니다.
&lt;br /&gt;
그러니 이렇게 정의할 수 있습니다. 우리가 웹사이트에 접속할 때 브라우저는 우리를 어디론가 데려가는 것이 아닙니다. 대신 웹사이트를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;REQUEST&lt;/code&gt;하고, 페이지를 가져다준다고 할 수 있습니다. 그럼 이제 할 일이 생겼군요. 우리가 만든 서버에 누군가가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET REQUEST&lt;/code&gt;를 보낸다면 어떻게 해야하는지 알려주어야 하거든요.&lt;/p&gt;

&lt;h2 id=&quot;request--response&quot;&gt;REQUEST &amp;amp; RESPONSE&lt;/h2&gt;

&lt;p&gt;이제 우리의 서버 어플리케이션이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET REQUEST&lt;/code&gt;에 응답할 수 있도록 해줍시다. 준비가 되면 어플리케이션은 listen하기 시작할 것입니다. 그 전에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;REQUEST&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RESPONSE&lt;/code&gt;를 좀 더 알아봐야 할 것 같네요.&lt;/p&gt;

&lt;h4 id=&quot;request-1&quot;&gt;REQUEST&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;REQUEST&lt;/code&gt;는 앞서 말씀드렸던 것과 같이 브라우저가 서버에게 웹사이트를 요청(REQUEST)하는 것이라고 이해해주시면 됩니다. 브라우저로부터 요청(REQUEST)를 받았다면 서버는 응답(RESPONSE)을 해주어야 겠지요? 일단은 간단한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console.log()&lt;/code&gt;만 출력해보도록 합시다. &lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PORT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleHome&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Somebody is trying to go home.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleHome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`Server listening on port &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;🚀`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;우리가 만든 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;express application&lt;/code&gt;인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app&lt;/code&gt;을 사용하여 응답하도록 합시다. 이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app&lt;/code&gt;에는 많은 옵션들이 있는데 그 중 &lt;strong&gt;get&lt;/strong&gt;을 사용하겠습니다. 이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get&lt;/code&gt;은 우리 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app&lt;/code&gt;에게 만약 누군가가 특정 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;route&lt;/code&gt;로 (우리의 경우엔 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/(home)&lt;/code&gt;) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET REQUEST&lt;/code&gt;를 보낸다면, 반응하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Callback&lt;/code&gt; 함수를 호출하겠다는 의미입니다. 참고로 꼭 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Callback&lt;/code&gt;에 함수를 사용해야 합니다. 함수를 보내지 않으면 실행할 수 없습니다. 결과를 볼까요? 실제로 작성해보고 결과를 한번 확인해 보시죠.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;사이트를 확인해보면, 브라우저는 계속 로딩상태일 것입니다. 하지만 콘솔 창을 보면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Callback&lt;/code&gt; 함수로 작성했던 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handleHome&lt;/code&gt;이 출력되어 있는걸 볼 수 있습니다. 여전히 브라우저는 먹통이지만, 우린 한 가지를 알아냈습니다. 작성한 코드로, 우리의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;express app&lt;/code&gt;이 브라우저의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET REQUEST&lt;/code&gt;에 반응했습니다! 그러니 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cannot GET /&lt;/code&gt;는 보이지 않는 것이지요 (물론 무한로딩 상태이지만요.) &lt;br /&gt;이제 문제는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET REQUEST&lt;/code&gt;에 반응하는 것이 아닌, 브라우저의 요청에 적절하게 대답해주지 못하는 것이 되었습니다. 브라우저는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt;에 해당하는 웹페이지를 요구하는데 우리 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app&lt;/code&gt;은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handleHome&lt;/code&gt;함수를 호출하여 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console.log(~~)&lt;/code&gt;만 실행할 뿐 아무런 작업도 하고 있지 않거든요. 이제 코드를 더 작성하여, 브라우저에게 웹사이트만을 보내줘야하는 작업이 남았습니다.
&lt;br /&gt;
더 넘어가기 전에, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET REQUEST&lt;/code&gt;가 동작하는 방식을 한번 정리해보겠습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;브라우저는 사용자가 요구하는 URL을 받아서 서버에게 전송한다.&lt;/li&gt;
  &lt;li&gt;서버는 브라우저가 요청하는 get method를 처리할 수 있는지를 확인한다.
    &lt;ul&gt;
      &lt;li&gt;불가능하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cannot GET /~~~&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;가능하면 해당&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;REQUEST&lt;/code&gt;에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RESPONSE(응답)&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET REQUEST&lt;/code&gt;에는 어디로 가는지에 대한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;route&lt;/code&gt;정보가 있습니다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;route&lt;/code&gt;는 home을 의미하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt;일 수도 있고, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/login&lt;/code&gt;일 수도 있고, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/profile&lt;/code&gt;일 수도 있는것이지요.&lt;/p&gt;

&lt;p&gt;이전에는 사용자가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;home&lt;/code&gt;경로로 가려할 때 아무것도 몰라서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cannot GET /&lt;/code&gt; 에러를 발생시켰지만, 이제 우리의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server app&lt;/code&gt;은 사용자가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt;으로 가려 할 때, 무엇을 해야할 지 알고 있습니다. 그러니 이제는 더이상 에러가 발생하지 않습니다.&lt;/p&gt;

&lt;h4 id=&quot;response&quot;&gt;RESPONSE&lt;/h4&gt;

&lt;p&gt;현재 우리 서버의 문제점을 이야기해 볼게요. 사용자의 request를 받아들이고 listening하고 있지만, 아직 응답(response)이 없는 상태입니다. 그럼 어떻게 해야 응답할 수 있을까요?
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;express&lt;/code&gt;의 route handler에는 &lt;strong&gt;request(req)&lt;/strong&gt;, &lt;strong&gt;response(res)&lt;/strong&gt;라는 훌륭한 object가 두 개 있습니다. 우리가 작성한 코드로 간략하게 설명을 해보자면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;home&lt;/code&gt;으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get request&lt;/code&gt;가 오면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;express&lt;/code&gt;는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handleHome&lt;/code&gt;에게 request, response object를 보내주게 됩니다. 코드를 실행한 후 request object를 확인해봅시다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PORT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleHome&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleHome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`✔ Server listening on port &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;🚀`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;콘솔 창을 확인해보면, 엄청난 양의 정보가 생긴것을 볼 수 있습니다. (ㄷㄷ) response object도 확인해봅시다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PORT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleHome&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleHome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`✔ Server listening on port &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;🚀`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;마찬가지로 정말 많은 정보가 생겼네요! 일단 req, res라는 object가 있다는 것을 확인해본 것으로 만족하고 다음으로 넘어가볼게요. 우리 무한로딩에 빠져있는 웹사이트를 쉬게 해주어야겠습니다. &lt;strong&gt;서버는 브라우저로부터 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;request&lt;/code&gt;를 받게 되면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;response&lt;/code&gt;를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return&lt;/code&gt;해주어야 합니다.&lt;/strong&gt; 그러한 의미를 코드에 담아봅시다. 방법은 크게 두가지가 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PORT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleHome&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleHome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`✔ Server listening on port &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;🚀`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;결과를 한번 확인해볼까요? &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;res.end()&lt;/code&gt;를 사용함으로써, 우리 서버는 이제 더 이상 무한 로딩에 빠져있지 않게 되었습니다! 결론적으로 말씀드리면 서버는 브라우저에게 아무것도 보내지 않고 request를 끝내버린 것입니다. 다른 방법도 한번 볼까요?&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PORT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleHome&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;I still love you&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleHome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`✔ Server listening on port &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;🚀`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;res.send()&lt;/code&gt;를 사용하는 방법도 있습니다. 무한로딩이 없어진 것은 물론이고, 웹사이트를 확인해보면 res.send안에 작성한 문자열이 웹사이트에 출력되어 있는 것을 볼 수 있습니다. 와우! &lt;br /&gt;연습으로 route 하나를 더 추가해 봅시다. 이제 우리의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;express server&lt;/code&gt;는 두 개의 URL&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(/, /login)&lt;/code&gt;을 이해할 수 있게 되었습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PORT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleHome&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;I still love you&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleLogin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Login here&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleHome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/login&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleLogin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`✔ Server listening on port &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;🚀`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;이런 방식으로 브라우저와 서버는 서로 상호작용을 하며 웹사이트를 사용자에게 보여주게 됩니다. 위의 예제처럼 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;res.send()&lt;/code&gt;를 사용하여 단순한 텍스트만 보여줄 수도 있고 html, 파일, 또는 status code등 많은 것들을 전달해줄 수 있습니다. 굉장히 복잡한 것 같지만 뭔가 재미있네요. &lt;strong&gt;request를 받고 response한다.&lt;/strong&gt; 이것이 우리의 wetube app의 기저기능이 될 것입니다.&lt;/p&gt;

&lt;p&gt;이렇게 차차 우리들만의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wetube&lt;/code&gt;를 만들어 가보도록 합시다. 다음시간에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;middleware&lt;/code&gt;에 대해 알아보도록 할게요. 꼭 만들어 봅시다. 포기하지 말고 화이팅!&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Woo Chang Uk</name>
        
        
      </author>

      

      
        <category term="Clone" />
      

      
        <summary type="html">안녕하세요. 성장하는 것을 즐기는 changuk이라고 합니다. 현재 nomadcoders에서 Wetube 클론코딩을 공부하고 있습니다. 강의를 들으면서 해온 것들을 작성하여 지식을 공유하고 또 제가 잊었을 때 다시 와서 볼 수 있도록 내용들을 정리하려고 합니다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Wetube 클론코딩 - SET UP</title>
      <link href="http://localhost:4000/wetube-cloning1" rel="alternate" type="text/html" title="Wetube 클론코딩 - SET UP" />
      <published>2022-01-25T09:00:00+09:00</published>
      <updated>2022-01-25T09:00:00+09:00</updated>
      <id>http://localhost:4000/wetube-cloning1</id>
      <content type="html" xml:base="http://localhost:4000/wetube-cloning1">&lt;p&gt;안녕하세요. 성장하는 것을 즐기는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;changuk&lt;/code&gt;이라고 합니다. 현재 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nomadcoders&lt;/code&gt;에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wetube&lt;/code&gt; 클론코딩을 공부하고 있습니다. 강의를 들으면서 해온 것들을 작성하여 지식을 공유하고 또 제가 잊었을 때 다시 와서 볼 수 있도록 내용들을 정리하려고 합니다.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;Wetube 클론코딩 &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;./wetube-cloning1&quot;&gt;SET UP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;a href=&quot;./wetube-cloning2&quot;&gt;INTRODUCTION TO EXPRESS&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href=&quot;./wetube-cloning3&quot;&gt;MIDDLEWARES(EXPRESS)&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;nodejs란&quot;&gt;NODEJS란?&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NodeJS&lt;/code&gt; 홈페이지에 들어가면 알 수 있듯이, NodeJS란 &lt;strong&gt;크롬 V8 자바스크립트 엔진으로 빌드된 자바스크립트 런타임&lt;/strong&gt;입니다.
&lt;br /&gt;
런타임(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Runtime&lt;/code&gt;)이란 프로그램이 실행되고 있는 동안의 동작이라고 정의되어 있는데, 일반적으로 &lt;strong&gt;프로그래밍 언어가 구동되는 환경&lt;/strong&gt;이라고 생각하시면 됩니다. 즉, 원래 웹사이트와 간단하게 상호작용하기 위해 만들어졌던 자바스크립트를 이젠 웹사이트에서만이 아닌 다른 환경에서도 실행할 수 있도록 만들어 주었다는 의미로 받아들이시면 됩니다.&lt;br /&gt;
이런 환경을 만듦으로써, 이젠 자바스크립트 언어만으로도 벡엔드(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;express&lt;/code&gt;)를 구성하고, 심지어는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IOS&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;안드로이드&lt;/code&gt; 어플도 만들 수 있게 되었다고 합니다(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;React-native&lt;/code&gt;). 아직 모바일 앱은 못만들어 봤지만… 차차 공부해가면 다 해낼 수 있을 겁니다 헤헤.
&lt;br /&gt;
그럼 잘 작동하는 지 확인도 해볼겸, NodeJS에서 실행될 첫 번째 JavaScript 파일을 한번 만들어서 실행해 보겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Hello NodeJS&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;콘솔 창에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hello NodeJS&lt;/code&gt;라는 문자열을 출력하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.js&lt;/code&gt;파일입니다. 출력결과를 한번 보죠.
&lt;img src=&quot;../assets/built/wetube/SETUP/first-js-node.png&quot; width=&quot;600&quot; height=&quot;50&quot; /&gt;
콘솔 창에 잘 출력되었습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;npm이란&quot;&gt;NPM이란?&lt;/h2&gt;

&lt;p&gt;이름에서 알 수 있듯, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm(node package manager)&lt;/code&gt;은 자바스크립트 언어를 위한 패키지 매니저입니다. 다른 개발자들은 이&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm&lt;/code&gt;이라는 곳에 자신들이 만든 패키지들을 업로드해주는데 그것들을 활용하면 정말 간단히 말해 개발을 아주 편하게 할 수 있도록 도와줍니다. 추후 모듈들을 소개하며 각각의 기능들을 살펴보면 어떤 의미인지 와닿을 것이라고 생각합니다&lt;del&gt;(공부가 부족하다고는 말 못해 읍읍)&lt;/del&gt;. 우리는 이 패키지 매니저에서 개발을 편하게 해주는 모듈을 가져다 쓸 수도 있고, 또는 특정 개발(ex. 벡엔드)에 꼭 필요한 모듈을 가져다 쓸 수도 있습니다.&lt;/p&gt;

&lt;p&gt;그럼 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm&lt;/code&gt;을 어떻게 사용하냐? &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;work directory&lt;/code&gt;의 콘솔창에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm init&lt;/code&gt;이라 입력하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.json&lt;/code&gt;파일을 자동으로 생성해줍니다 &lt;br /&gt;(약간의 설정을 요구함).
&lt;img src=&quot;../assets/built/wetube/SETUP/npm-init.png&quot; width=&quot;800&quot; height=&quot;300&quot; /&gt;
모든 값들을 무시하고 엔터만 계속 치면, package.json파일이 생성됩니다.&lt;br /&gt;
&lt;img src=&quot;../assets/built/wetube/SETUP/npm-init-fin.png&quot; width=&quot;800&quot; height=&quot;450&quot; /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm&lt;/code&gt;을 사용하여 모듈들을 설치한다면 이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.json&lt;/code&gt;파일에 설치된(할) 모듈들의 이름들이 입력됩니다.
&lt;del&gt;(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.json&lt;/code&gt;은 아주 많은 모듈들의 이름을 받게 될 운명에 처해있죠 후후…)&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;이처럼, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm&lt;/code&gt;은 여러 모듈들을 설치하게 도와주는 패키지 매니저로 생각하면 됩니다.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NodeJS&lt;/code&gt;로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app&lt;/code&gt; 개발을 한다는 것은 레고를 만드는걸로 비유할 수 있습니다. 하나씩 하나씩 쌓아 올라가면서 만들어야 하거든요. 보다시피 처음은 굉장히 간단하죠? 하지만 레고를 만들 때 아무 생각없이 하다 보면 뭘 만들고 있는지 잊는 것 처럼, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NodeJS&lt;/code&gt;로 개발을 할 때에도 마찬가지입니다. 개발자가 어떤 행동을 할 때 스스로 어떤 결과를 발생시키는지 인지하고 있지 않다면 어떤 무시무시한 일이 발생할 지… 무튼 각 세부내용들을 잘 숙지하여 불상사가 없도록 합시다. ㅎㅎ &lt;del&gt;(그래서 블로그 글을 쓰고있다고는 말 못해 읍읍)&lt;/del&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;packagejson의-기능-script&quot;&gt;package.json의 기능 (script)&lt;/h2&gt;

&lt;p&gt;package.json 파일을 보시면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;script&quot;&lt;/code&gt;라고 하는 부분이 있습니다. 원래 NodeJS환경에서 index.js라는 자바스크립트 파일을 사용하려면, 콘솔창에다가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node index.js&lt;/code&gt;라고 입력해주어야 index.js를 실행할 수 있었습니다. 하지만 이제 package.json의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;script&lt;/code&gt; 기능을 사용하면 npm 명령어로 파일을 실행할 수 있습니다. 나중에 알아볼 수 있겠지만, 서버를 시작하는 script, CSS를 압축하는 script, 웹사이트를 빌드하고 서버에 배포하는 script 등등… 여러 script를 만들어서 사용할 수 있습니다. 와우! script 기능으로 개발 시간을 상당히 아낄 수 있습니다. script안에 다음과 같이 작성해 봅시다.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;win&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node index.js&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그 후, 콘솔 창에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm run win&lt;/code&gt;을 입력하시면, node index.js를 입력하지 않아도, index.js를 실행해주는 것을 볼 수 있습니다! 물론, 한 파일 가지고는 node index.js를 쓰든 npm run win을 쓰든 똑같은거 아니냐고 할 수 있지만 script의 장점은 다른 명령어를 추가해도 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm run win&lt;/code&gt; 한번이면 원하는 기능을 다 작동시켜주는 것에 있으니까요. script를 잘 이용하도록 합시다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;express-설치&quot;&gt;Express 설치&lt;/h2&gt;

&lt;p&gt;script도 알았겠다, 우리의 첫 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;module&lt;/code&gt;인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;express&lt;/code&gt;를 설치해 봅시다. 이 모듈이 없으면 서버를 만들 수가 없습니다… 첫 등장으로부터 꽤 시간이 지났지만 여전히 쓰이고 있는 모듈로서, JavaScript로 벡엔드 개발을 한다면 절대 없어서는 안되는 친구입니다. npmjs에서 express가 현재 얼마나 사용되고 있는지 한번 보시죠. &lt;a href=&quot;https://www.npmjs.com/package/express&quot; target=&quot;_blank&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXPRESS&lt;/code&gt;&lt;/a&gt;&lt;br /&gt;
서두가 길었습니다. 콘솔 창에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm install express&lt;/code&gt;를 입력합시다. i로 하셔도 되고, install 이라고 하셔도 됩니다. 둘 다 동일하게 작동합니다.
&lt;img src=&quot;../assets/built/wetube/SETUP/install-express.png&quot; width=&quot;800&quot; height=&quot;350&quot; /&gt;
설치가 완료되었습니다. 우리의 package.json의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;dependencies&quot;&lt;/code&gt;를 보면 express가 잘 설치되어 있습니다!
&lt;br /&gt;
왼쪽의 현재 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;work directory&lt;/code&gt;를 한 번 살펴보시죠.
&lt;img src=&quot;../assets/built/wetube/SETUP/node-modules.png&quot; width=&quot;200&quot; height=&quot;200&quot; /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node_modules&lt;/code&gt;가 생성되었습니다. 이게 뭘까요?? &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm&lt;/code&gt;으로 설치한 모듈들은 모두 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node_modules&lt;/code&gt;에 설치가 됩니다. 그런데 우리가 설치한 건 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;express&lt;/code&gt;뿐인데, 처음 보는 모듈들도 많이 있습니다. 이것은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;express&lt;/code&gt;의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.json&lt;/code&gt;을 보면 확실하게 알 수 있습니다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.json&lt;/code&gt; 안의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;dependencies&quot;&lt;/code&gt;를 한번 봅시다.
&lt;img src=&quot;../assets/built/wetube/SETUP/express-dependencies.png&quot; width=&quot;300&quot; height=&quot;400&quot; /&gt;
상당히 많은 모듈의 이름들이 적혀있습니다. 이것은 바로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;express&lt;/code&gt;를 사용하기 위해 필요한 모듈들 입니다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node_modules&lt;/code&gt;에는 해당 모듈들을 사용할 때 필요한 모듈들도 설치가 되어 있습니다. 다시 말씀드리면 express를 설치할 때 express를 사용하기 위해 필요한 모듈들도 같이 설치가 되고, 설치가 된 모듈들을 사용할 때 필요한 모듈들도 설치되는… 것이죠. 뭐, 어떤 모듈들이 설치되어야 하는지 알 필요는 없습니다. &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm&lt;/code&gt;이 알아서 해주니까요!&lt;/strong&gt; &lt;br /&gt; 또 여기서 아시면 좋을게 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;devDependencies&quot;&lt;/code&gt;라는 것이 있습니다. 이것은 개발자가 필요로 하는 모듈들을 설치해주는 명세서라고 보시면 됩니다. 프로젝트를 배포한 후 작동시킬 때 필요한 것이 아니라, 개발에 편의를 줄 수 있는 모듈을 개발자의 기호에 맞게 설치해달라고 package.json에게 전달해주는 것이죠.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;npm-install&quot;&gt;npm install&lt;/h2&gt;

&lt;p&gt;문제가 있습니다. node_modules는 데이터가 너무 많아요. express 하나만 설치했는데도 폴더의 갯수가 너무 많아요. 이 상태로는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;github&lt;/code&gt;에 업로드 하기가 꺼려집니다. 다행이도 npm이 다 해결해줍니다. npm은 package.json파일의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;dependencies&quot;&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;devDependencise&quot;&lt;/code&gt;만 있으면 프로젝트에 필요한 모든 파일들을 알아서 설치해줍니다! 그러니 node_modules폴더를 공유해 줄 필요가 없는거죠. 다음 명령만 콘솔창에 입력해주면 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;npm i // 또는 npm install
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node_modules&lt;/code&gt;를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;github&lt;/code&gt;에 업로드 하지 않으려면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; 파일을 생성하고 파일 안에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node_modules&lt;/code&gt;를 입력해주면 됩니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;babel&quot;&gt;Babel&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SETUP&lt;/code&gt;에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Babel&lt;/code&gt;을 빼놓을 수 없습니다. JavaScript는 1995년 처음 발표되었습니다. 그 후 계속해서 업데이트를 해오고 있고 현재 버전은 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8&quot; target=&quot;_blank&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ECMAScript 2020&lt;/code&gt;&lt;/a&gt; 입니다. 업데이트를 계속함으로 인해 개발할 때 불편한 부분들도 개선해나가고, 효율도 향상시켜주기 때문에 업데이트는 반드시 필요한 것이라고 할 수 있지요. 문제는 &lt;strong&gt;모든 브라우저가 이 최신 버전의 JavaScript를 지원해주지 않는다&lt;/strong&gt;는 것에 있습니다. 개발자들은 최신 버전의 JavaScript언어를 사용하고 싶지만 웹 app이 동작할 브라우저가 항상 최신 버전 JavaScript를 지원해 줄 것이라는 걸 기대할 수는 없기에 이전 버전의 JavaScript코드로 변환을 해주어야 합니다. 또한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NodeJS&lt;/code&gt;조차 최신 버전 JavaScript를 이해하지 못할 수도 있습니다. 이 때 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Babel&lt;/code&gt;이 사용되는 것이지요. &lt;a href=&quot;https://babeljs.io/setup#installation&quot; target=&quot;_blank&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Babel&lt;/code&gt;&lt;/a&gt;을 설치해 봅시다.
&lt;br /&gt;
링크로 들어가면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Installation&lt;/code&gt;에 다음과 같이 콘솔 창에 입력하라고 합니다. 그런데 못 본 명령어가 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;npm install --save-dev @babel/core
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--save-dev&lt;/code&gt;가 뭘까요? 앞서 말씀드렸듯이 해당 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@babel/core&lt;/code&gt; 패키지를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.json&lt;/code&gt;에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;devDependencies&lt;/code&gt;로 설치하라는 명령어 입니다. 물론 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dependencies&lt;/code&gt;나 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;devDependencies&lt;/code&gt; 둘 다 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node_modules&lt;/code&gt;에 설치되기 때문에 큰 차이는 없을 수 있지만, 구분하고 있는 것 같습니다. 굳이 비유하자면 자동차의 기름이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dependencies&lt;/code&gt;고 자동차에서 나오는 음악이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;devDependencies&lt;/code&gt;입니다.
&lt;br /&gt;
@babel/core를 잘 설치해주고 나면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;babel.config.json&lt;/code&gt;파일을 만들라고 합니다. 시작해봅시다. 저는 WSL(window subsystem for linux)를 사용해서 touch명령어를 쓸 수 있지만 window terminal을 사용하시는 분들은 직접 파일을 만드시면 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;touch babel.config.json
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 파일을 열어 다음 코드를 입력해줍시다.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;presets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;@babel/preset-env&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;하나 더 설치해줍시다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;npm install @babel/preset-env --save-dev
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Babel&lt;/code&gt;을 활용하면 최신의 JavaScript문법을 사용할 수 있다고 했지만, 설정을 해 줄 필요가 있습니다. 그래서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;babel.config.json&lt;/code&gt;에다가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;presets&lt;/code&gt;를 정의해 주었습니다.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;preset&lt;/code&gt;은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Babel&lt;/code&gt;을 위한 엄청 거대한 플러그인이라고 생각하면 되는데, 우리는 &lt;a href=&quot;https://babeljs.io/docs/en/babel-preset-env&quot; target=&quot;_blank&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@babel/preset-env&lt;/code&gt;&lt;/a&gt;라는 것을 사용하게 됩니다. 궁금하시면 링크를 한번 보시죠. 무튼 이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;preset&lt;/code&gt;은 최신 JavaScript 구문을 사용할 수 있도록 해줍니다.&lt;/p&gt;

&lt;p&gt;설치도 다 되었으니 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Babel&lt;/code&gt;을 사용해봅시다. JavaScript 파일 내에서 사용하지 않고, package.json의 script를 이용해서 babel로 컴파일하도록 하겠습니다. 이를 위해 &lt;a href=&quot;https://babeljs.io/setup#installation&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nodemon&lt;/code&gt;&lt;/a&gt;을 사용할 겁니다.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@babel/core&lt;/code&gt;는 이미 설치했으니까, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@babel/node&lt;/code&gt;만 설치합시다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;npm install @babel/node --save-dev
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;script&lt;/code&gt;를 수정해볼까요? development를 뜻하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dev&lt;/code&gt;명령어로 바꿔주고 시작해봅시다. 그 후 우리는 babel로 컴파일 해 줄것이기 때문에 같이 적어줍시다.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;babel-node index.js&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;babel도 다 세팅해주었겠다, 이제 최신 문법을 사용할 수 있습니다. 바로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import&lt;/code&gt;입니다! 원래 express를 사용하던 방법을 한번 볼까요?&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음과 같이 express라는 상수를 선언해주고, package.json에 명시되어 있는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;express&lt;/code&gt;를 가져오는 코드였는데 최신 문법을 적용하면 다음과 같아집니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;nodemon이란&quot;&gt;nodemon이란?&lt;/h2&gt;

&lt;p&gt;아주 잘 진행되고 있습니다! 그런데 파일을 업데이트 해 줄 때마다 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm run dev&lt;/code&gt;를 실행하기가 굉장히 귀찮네요. 그러니 새로운 패키지인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nodemon&lt;/code&gt;을 설치해주겠습니다. 이 패키지를 사용하면 콘솔 창을 종료할 때 까지 계속해서 파일의 업데이트 상황을 체크해주고, 만약 업데이트가 된 파일이 있다면 파일을 재실행 시켜줍니다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;npm install nodemon --save-dev
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;설치가 완료가 되었다면 package.json의 script를 다음과 같이 수정해줍시다.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;dev&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nodemon --exec babel-node index.js&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 콘솔 창에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm run dev&lt;/code&gt;라고 실행해주면, nodemon이 적용된 채 작동하는 것을 볼 수 있고, 터미널이 종료되지 않는걸 볼 수 있습니다! 파일을 새로 저장할 때 마다 nodemon이 체크해주고 알아서 새로고침 해주는 것을 볼 수 있습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SETUP&lt;/code&gt;이 정말 기네요. 이제 시작입니다. 힘내고 계속 다음으로 넘어가겠습니다. 저도 포기하지 않고 Wetube 클론코딩을 마무리 할 때까지 기운내도록 하겠습니다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Woo Chang Uk</name>
        
        
      </author>

      

      
        <category term="Clone" />
      

      
        <summary type="html">안녕하세요. 성장하는 것을 즐기는 changuk이라고 합니다. 현재 nomadcoders에서 Wetube 클론코딩을 공부하고 있습니다. 강의를 들으면서 해온 것들을 작성하여 지식을 공유하고 또 제가 잊었을 때 다시 와서 볼 수 있도록 내용들을 정리하려고 합니다.</summary>
      

      
      
    </entry>
  
</feed>
