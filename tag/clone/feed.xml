<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="http://localhost:4000/tag/clone/feed.xml" rel="self" type="application/atom+xml" />
  <link href="http://localhost:4000/" rel="alternate" type="text/html" />
  <updated>2022-01-25T21:46:29+09:00</updated>
  <id>http://localhost:4000/tag/clone/feed.xml</id>

  
  
  

  
    <title type="html">Collection of studies | </title>
  

  
    <subtitle>공부 정리용 블로그</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">Wetube 클론코딩 - SET UP (1)</title>
      <link href="http://localhost:4000/wetube-cloning1" rel="alternate" type="text/html" title="Wetube 클론코딩 - SET UP (1)" />
      <published>2022-01-25T09:00:00+09:00</published>
      <updated>2022-01-25T09:00:00+09:00</updated>
      <id>http://localhost:4000/wetube-cloning1</id>
      <content type="html" xml:base="http://localhost:4000/wetube-cloning1">&lt;p&gt;안녕하세요. 성장하는 것을 사랑하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;changuk&lt;/code&gt;이라고 합니다. 현재 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nomadcoders&lt;/code&gt;에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wetube&lt;/code&gt; 클론코딩을 공부하고 있습니다. 강의를 들으면서 해온 것들을 작성하여 지식을 공유하고 또 제가 잊었을 때 다시 와서 볼 수 있도록 내용들을 정리하려고 합니다.&lt;/p&gt;

&lt;h2 id=&quot;nodejs란&quot;&gt;NODEJS란?&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NodeJS&lt;/code&gt; 홈페이지에 들어가면 알 수 있듯이, NodeJS란 &lt;strong&gt;크롬 V8 자바스크립트 엔진으로 빌드된 자바스크립트 런타임&lt;/strong&gt;입니다.
&lt;br /&gt;
런타임(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Runtime&lt;/code&gt;)이란 프로그램이 실행되고 있는 동안의 동작이라고 정의되어 있는데, 일반적으로 &lt;strong&gt;프로그래밍 언어가 구동되는 환경&lt;/strong&gt;이라고 생각하시면 됩니다. 즉, 원래 웸사이트와 간단하게 상호작용하기 위해 만들어졌던 자바스크립트를 이젠 웹사이트에서만이 아닌 다른 환경에서도 실행할 수 있도록 만들어 주었다는 의미로 받아들이시면 됩니다.&lt;br /&gt;
이런 환경을 만듦으로써, 이젠 자바스크립트 언어만으로도 벡엔드(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;express&lt;/code&gt;)를 구성하고, 심지어는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IOS&lt;/code&gt;, 안드로이드 어플도 만들 수 있게 되었다고 합니다(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;React-native&lt;/code&gt;). 아직 핸드폰 앱은 못만들어 봤지만… 차차 공부해가면서 다 해낼 수 있을 것이라 생각합니다.
&lt;br /&gt;
그럼 잘 작동하는 지 확인도 해볼겸, NodeJS에서 실행될 첫 번째 JavaScript 파일을 한번 만들어서 실행해 보겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Hello NodeJS&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;콘솔 창에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hello NodeJS&lt;/code&gt;라는 문자열을 출력하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.js&lt;/code&gt;파일입니다. 출력결과를 한번 보죠.
&lt;img src=&quot;../assets/built/wetube/SETUP/first-js-node.png&quot; width=&quot;600&quot; height=&quot;50&quot; /&gt;
콘솔 창에 잘 출력되었습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;npm이란&quot;&gt;NPM이란?&lt;/h2&gt;

&lt;p&gt;이름에서 알 수 있듯, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm(node package manager)&lt;/code&gt;은 자바스크립트 언어를 위한 패키지 매니저입니다. 다른 개발자들은 이&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm&lt;/code&gt;이라는 곳에 자신들이 만든 패키지들을 업로드해주는데 그것들을 활용하면 정말 간단히 말해 개발을 아주 편하게 할 수 있도록 도와줍니다. 추후 모듈들을 소개하며 각각의 기능들을 살펴보면 어떤 의미인지 와닿을 것이라고 생각합니다&lt;del&gt;(공부가 부족하다고는 말 못해 읍읍)&lt;/del&gt;. 우리는 이 패키지 매니저에서 개발을 편하게 해주는 모듈을 가져다 쓸 수도 있고, 또는 특정 개발(ex. 벡엔드)에 꼭 필요한 모듈을 가져다 쓸 수도 있습니다.&lt;/p&gt;

&lt;p&gt;그럼 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm&lt;/code&gt;을 어떻게 사용하냐? &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;work directory&lt;/code&gt;의 콘솔창에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm init&lt;/code&gt;이라 입력하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.json&lt;/code&gt;파일을 자동으로 생성해줍니다 &lt;br /&gt;(약간의 설정을 요구함).
&lt;img src=&quot;../assets/built/wetube/SETUP/npm-init.png&quot; width=&quot;800&quot; height=&quot;300&quot; /&gt;
모든 값들을 무시하고 엔터만 계속 치면, package.json파일이 생성됩니다.&lt;br /&gt;
&lt;img src=&quot;../assets/built/wetube/SETUP/npm-init-fin.png&quot; width=&quot;800&quot; height=&quot;450&quot; /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm&lt;/code&gt;을 사용하여 모듈들을 설치한다면 이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.json&lt;/code&gt;파일에 설치된(할) 모듈들의 이름들이 입력됩니다.
&lt;del&gt;(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.json&lt;/code&gt;은 아주 많은 모듈들의 이름을 받게 될 운명에 처해있죠 후후…)&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;이처럼, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm&lt;/code&gt;은 여러 모듈들을 설치하게 도와주는 패키지 매니저로 생각하면 됩니다.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NodeJS&lt;/code&gt;로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app&lt;/code&gt; 개발을 한다는 것은 레고를 만드는걸로 비유할 수 있습니다. 하나씩 하나씩 쌓아 올라가면서 만들어야 하거든요. 보다시피 처음은 굉장히 간단하죠? 하지만 레고를 만들 때 아무 생각없이 하다 보면 뭘 만들고 있는지 잊는 것 처럼, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NodeJS&lt;/code&gt;로 개발을 할 때에도 마찬가지입니다. 개발자가 어떤 행동을 할 때 스스로 어떤 결과를 발생시키는지 인지하고 있지 않다면 어떤 무시무시한 일이 발생할 지… 무튼 각 세부내용들을 잘 숙지하여 불상사가 없도록 합시다. ㅎㅎ &lt;del&gt;(그래서 블로그 글을 쓰고있다고는 말 못해 읍읍)&lt;/del&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;packagejson의-기능-script&quot;&gt;package.json의 기능 (script)&lt;/h2&gt;

&lt;p&gt;package.json 파일을 보시면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;script&quot;&lt;/code&gt;라고 하는 부분이 있습니다. 원래 NodeJS환경에서 index.js라는 자바스크립트 파일을 사용하려면, 콘솔창에다가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node index.js&lt;/code&gt;라고 입력해주어야 index.js를 실행할 수 있었습니다. 하지만 이제 package.json의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;script&lt;/code&gt; 기능을 사용하면 npm 명령어로 파일을 실행할 수 있습니다. 나중에 알아볼 수 있겠지만, 서버를 시작하는 script, CSS를 압축하는 script, 웹사이트를 빌드하고 서버에 배포하는 script 등등… 여러 script를 만들어서 사용할 수 있습니다. 와우! script 기능으로 개발 시간을 상당히 아낄 수 있습니다. script안에 다음과 같이 작성해 봅시다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;scripts&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;win&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;node index.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그 후, 콘솔 창에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm run win&lt;/code&gt;을 입력하시면, node index.js를 입력하지 않아도, index.js를 실행해주는 것을 볼 수 있습니다! 물론, 한 파일 가지고는 node index.js를 쓰든 npm run win을 쓰든 똑같은거 아니냐고 할 수 있지만 script의 장점은 다른 명령어를 추가해도 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm run win&lt;/code&gt; 한번이면 원하는 기능을 다 작동시켜주는 것에 있으니까요. script를 잘 이용하도록 합시다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;express-설치&quot;&gt;Express 설치&lt;/h2&gt;

&lt;p&gt;script도 알았겠다, 우리의 첫 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;module&lt;/code&gt;인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;express&lt;/code&gt;를 설치해 봅시다. 이 모듈이 없으면 서버를 만들 수가 없습니다… 첫 등장으로부터 꽤 시간이 지났지만 여전히 쓰이고 있는 모듈로서, JavaScript로 벡엔드 개발을 한다면 절대 없어서는 안되는 친구입니다. npmjs에서 express가 현재 얼마나 사용되고 있는지 한번 보시죠. &lt;a href=&quot;https://www.npmjs.com/package/express&quot; target=&quot;_blank&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXPRESS&lt;/code&gt;&lt;/a&gt;&lt;br /&gt;
서두가 길었습니다. 콘솔 창에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm install express&lt;/code&gt;를 입력합시다. i로 하셔도 되고, install 이라고 하셔도 됩니다. 둘 다 동일하게 작동합니다.
&lt;img src=&quot;../assets/built/wetube/SETUP/install-express.png&quot; width=&quot;800&quot; height=&quot;350&quot; /&gt;
설치가 완료되었습니다. 우리의 package.json의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;dependencies&quot;&lt;/code&gt;를 보면 express가 잘 설치되어 있습니다!
&lt;br /&gt;
왼쪽의 현재 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;work directory&lt;/code&gt;를 한 번 살펴보시죠.
&lt;img src=&quot;../assets/built/wetube/SETUP/node-modules.png&quot; width=&quot;400&quot; height=&quot;200&quot; /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node_modules&lt;/code&gt;가 생성되었습니다. 이게 뭘까요?? &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm&lt;/code&gt;으로 설치한 모듈들은 모두 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node_modules&lt;/code&gt;에 설치가 됩니다. 그런데 우리가 설치한 건 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;express&lt;/code&gt;뿐인데, 처음 보는 모듈들도 많이 있습니다. 이것은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;express&lt;/code&gt;의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.json&lt;/code&gt;을 보면 확실하게 알 수 있습니다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.json&lt;/code&gt; 안의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;dependencies&quot;&lt;/code&gt;를 한번 봅시다.
&lt;img src=&quot;../assets/built/wetube/SETUP/express-dependencies.png&quot; width=&quot;500&quot; height=&quot;400&quot; /&gt;
상당히 많은 모듈의 이름들이 적혀있습니다. 이것은 바로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;express&lt;/code&gt;를 사용하기 위해 필요한 모듈들 입니다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node_modules&lt;/code&gt;그 모듈들을 사용할 때 필요한 모듈들도 설치가 되어 있습니다. 그러니까 express를 설치하면, express를 사용하기 위해 필요한 모듈들도 같이 설치가 되고, 설치가 된 모듈들을 사용할 때 필요한 모듈들도 설치되는… 것이죠. 뭐, 어떤 모듈들이 설치되어야 하는지 알 필요는 없습니다. npm이 알아서 해주니까요! &lt;br /&gt; 또 여기서 아시면 좋을게 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;devDependencies&quot;&lt;/code&gt;라는 것이 있습니다. 이것은 개발자가 필요로 하는 모듈들을 설치해주는 명세서라고 보시면 됩니다. 프로젝트를 배포한 후 작동시킬 때 필요한 것이 아니라, 개발에 편의를 줄 수 있는 모듈을 개발자의 기호에 맞게 설치해달라고 package.json에게 전달해주는 것이죠.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Woo Chang Uk</name>
        
        
      </author>

      

      
        <category term="Clone" />
      

      
        <summary type="html">안녕하세요. 성장하는 것을 사랑하는 changuk이라고 합니다. 현재 nomadcoders에서 Wetube 클론코딩을 공부하고 있습니다. 강의를 들으면서 해온 것들을 작성하여 지식을 공유하고 또 제가 잊었을 때 다시 와서 볼 수 있도록 내용들을 정리하려고 합니다.</summary>
      

      
      
    </entry>
  
</feed>
